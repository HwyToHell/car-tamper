// project specific
#include "../inc/backgroundsubtraction.h"
#include "../inc/motion-detector.h"
#include "../inc/motionbuffer.h"
#include "../inc/time-stamp.h"
#include "../inc/video-capture-simu.h"

// opencv
#include <opencv2/opencv.hpp>

// qt
#include <QApplication>
#include <QDir>
#include <QFileDialog>
#include <QString>

// std
#include <chrono>
#include <iostream>
#include <string>



// test MotionBuffer saveToDisk by analyzing video file
int main(int argc, char *argv[]) {
    QApplication a(argc, argv);
    using namespace std;

    QString videoFile = QFileDialog::getOpenFileName(nullptr,
         "Select video file",
         QDir::currentPath(),
        "Video files (*.avi *.mp4)" );
    std::string file(videoFile.toUtf8());

    auto start = chrono::system_clock::now();

    cv::VideoCapture cap(file, cv::CAP_FFMPEG);
    if (!cap.isOpened()) {
        cout << "cannot open: " << file << endl;
        return -1;
    }

    double readSourceFps = cap.get(cv::CAP_PROP_FPS);
    double sumFrames = cap.get(cv::CAP_PROP_FRAME_COUNT);
    cout << "fps generated by source: " << readSourceFps << endl;
    cout << "number of frames in file: " << sumFrames << endl;


    const size_t bufSize = 30;
    MotionBuffer mb(bufSize, readSourceFps, "video", "log");

    MotionDetector mdet;
    cv::Mat frame;

    int cnt = 0;
    while (cap.read(frame)) {
        ++cnt;

        mb.pushToBuffer(frame);
        bool isMotion = mdet.hasFrameMotion(frame);
        mdet.updateMotionDuration(isMotion);
        mdet.enableSaveToDisk(mb);

        /*
        cv::imshow("video", frame);
        cv::imshow("motion", mdet.getMotionFrame());
        if (cv::waitKey(1) == 27) {
            cout << "esc -> end video processing" << endl;
            break;
        }
        */


        double currentFrame = cap.get(cv::CAP_PROP_POS_FRAMES);
        double progress = std::floor(currentFrame / sumFrames * 100);
        if (cnt % 30 == 0) {
            cout << progress << "%\r";
            cout.flush();
        }

    }
    cap.release();
    cout << endl;
    cout << "reading video file finished and video capture released" << endl;

    auto stop = chrono::system_clock::now();
    auto elapsedSec = std::chrono::duration_cast<std::chrono::seconds>(stop - start);
    cout << "video analysis took " << elapsedSec.count() << " seconds" << endl << endl;

    return 0;
}
