// project specific
#include "../inc/backgroundsubtraction.h"
#include "../inc/motion-detector.h"
#include "../inc/motionbuffer.h"
#include "../inc/time-stamp.h"
#include "../inc/video-capture-simu.h"

// opencv
#include <opencv2/opencv.hpp>

// qt
#include <QApplication>
#include <QDir>
#include <QFileDialog>
#include <QString>

// std
#include <iostream>
#include <string>


// returns video file name
// start: enable saveToDisk at this frame number
// stop: disable saveToDisk at this frame number
static std::string writeToDiskTest(MotionBuffer& buf, VideoCaptureSimu& cap,
                     int start, int stop) {
    cv::Mat frame;
    for (int count = 0; count <= stop + 5; ++count) {
        std::cout << std::endl << "pass: " << count << std::endl;

        // buf = 1 (min value) -> first frame written = start+1
        if (count >= start && !buf.isSaveToDiskRunning())
            buf.setSaveToDisk(true);

        // stop must be start+1 or greater to generate log file
        if (count >= stop)
            buf.setSaveToDisk(false);

        cap.read(frame);
        std::cout << "frame read" << std::endl;
        buf.pushToBuffer(frame);
    }

    // TODO if saveToDiskRunning -> use blocking version of getMotionFileName
    std::string videoFileName = buf.getVideoFileName();
    std::cout << "new video file created: " << videoFileName << std::endl;
    return videoFileName;
}

// test MotionBuffer saveToDisk
int main(int argc, char *argv[]) {
    (void)argc; (void)argv;
    using namespace std;

    /* test cv::rectangle
    const cv::Vec3b black  = cv::Vec3b(0,0,0);
    const cv::Size frameSize(640,480);
    cv::Mat frame(frameSize, CV_8UC3, black);
    cv::Rect motionRect(0,0,100,frameSize.width);
    cv::Vec3b greyShade = cv::Vec3b(0, 128, 128);
    cv::rectangle(frame, motionRect, greyShade, cv::FILLED, cv::LINE_4);
    cv::imshow("video", frame);
    cv::waitKey(0);
    return 0;
    */

    const size_t sourceFps = 30;
    VideoCaptureSimu cap(sourceFps, "640x480");
    double readSourceFps = cap.get(cv::CAP_PROP_FPS);
    cout << "fps generated by source: " << readSourceFps << endl;


    const size_t bufSize = 30;
    MotionBuffer mb(bufSize, readSourceFps, "video", "log");

    MotionDetector mdet;
    cv::Mat frame;

    //cap.setMotionMode(30, 50);

    int cnt = 0;
    while (cap.read(frame)) {
        ++cnt;


        if (cnt % static_cast<int>(sourceFps) == 0) {
            int greyScale = cnt / static_cast<int>(sourceFps) % 10 * 10;
            cout << "grey scale: " << greyScale << endl;
            cap.setMotionMode(30, greyScale, true);
        }


        /*
        bool isMotion = mdet.hasFrameMotion(frame);
        int duration = mdet.updateMotionDuration(isMotion);
        // enable saveToDisk mode
        // setSaveToDisk(MotionBuffer
        if (duration > 10 && !mb.isSaveToDiskRunning()) {}
        */


        cv::imshow("video", frame);

        if (cv::waitKey(10) == 27) {
            cout << "esc -> end video processing" << endl;
            break;
        }
    }

    cap.release();
    cout << endl;
    cout << "finished" << endl;
    return 0;
}
